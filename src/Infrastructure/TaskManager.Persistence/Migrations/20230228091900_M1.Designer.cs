// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using TaskManager.Persistence.Context;

#nullable disable

namespace TaskManager.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230228091900_M1")]
    partial class M1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Domain.Common.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseEntity");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.Product", b =>
                {
                    b.HasBaseType("TaskManager.Domain.Common.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Product");
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.SH_User", b =>
                {
                    b.HasBaseType("TaskManager.Domain.Common.BaseEntity");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CellPhone")
                        .HasColumnType("varchar(10)");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IdentityNumber")
                        .HasColumnType("varchar(11)");

                    b.Property<bool?>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(250)");

                    b.Property<Guid>("TownId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("CityId")
                        .IsUnique()
                        .HasFilter("[CityId] IS NOT NULL");

                    b.HasIndex("TownId")
                        .IsUnique()
                        .HasFilter("[TownId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("SH_User");
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.UT_City", b =>
                {
                    b.HasBaseType("TaskManager.Domain.Common.BaseEntity");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneCode")
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PlateNumber")
                        .HasColumnType("varchar(2)");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("UT_City_Name");
                        });

                    b.HasDiscriminator().HasValue("UT_City");
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.UT_Country", b =>
                {
                    b.HasBaseType("TaskManager.Domain.Common.BaseEntity");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<Geometry>("Shape")
                        .HasColumnType("geometry");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("Name")
                                .HasColumnName("UT_Country_Name");
                        });

                    b.HasDiscriminator().HasValue("UT_Country");
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.UT_Town", b =>
                {
                    b.HasBaseType("TaskManager.Domain.Common.BaseEntity");

                    b.Property<Guid?>("CityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.HasIndex("CityId")
                        .IsUnique()
                        .HasFilter("[CityId] IS NOT NULL");

                    b.ToTable("BaseEntity", t =>
                        {
                            t.Property("CityId")
                                .HasColumnName("UT_Town_CityId");

                            t.Property("Name")
                                .HasColumnName("UT_Town_Name");
                        });

                    b.HasDiscriminator().HasValue("UT_Town");
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.SH_User", b =>
                {
                    b.HasOne("TaskManager.Domain.Entities.UT_City", "City")
                        .WithOne("User")
                        .HasForeignKey("TaskManager.Domain.Entities.SH_User", "CityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskManager.Domain.Entities.UT_Town", "Town")
                        .WithOne("User")
                        .HasForeignKey("TaskManager.Domain.Entities.SH_User", "TownId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Town");
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.UT_Town", b =>
                {
                    b.HasOne("TaskManager.Domain.Entities.UT_City", "City")
                        .WithOne("Town")
                        .HasForeignKey("TaskManager.Domain.Entities.UT_Town", "CityId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("City");
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.UT_City", b =>
                {
                    b.Navigation("Town");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TaskManager.Domain.Entities.UT_Town", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
